- style: clay
  title: Function Oriented JavaScript
  notes: |
    I call this talk "Function Oriented JavaScript", but we're really going to be looking at other
    functional languages and attempting to extract good habits from them and apply them to JavaScript.

- style: purple
  text: |
    <p><q>LISP is worth learning for a different reason — the profound enlightenment experience you will have 
    when you finally get it.</q> <strong>Eric Raymond</strong></p>

    <p><q>The reason everyone doesn't use [Lisp] is that programming languages are not merely technologies, but habits 
    of mind as well, and nothing changes slower.</q> <strong>Paul Graham</strong></p>
  notes: Put these somewhere useful or cut from deck

- style: slate
  heading: Assign functions to variables
  code:
    - (Scheme)
    - square.scm
    - (JavaScript)
    - higher-order1.js

- style: mold
  heading: Pass functions to functions
  code:
    - (Scheme)
    - map-odd.scm
    - (JavaScript)
    - higher-order2.js
  notes: We demonstrate both function scope and closure here. Closures date back to 1975 and come from Scheme.

- style: slate
  heading: Return functions from functions
  code:
    - (Scheme)
    - multiply.scm
    - (TODO Another Example)

- style: slate
  heading: Return functions from functions
  code:
    - (JavaScript)
    - higher-order3.js

- style: clay
  text: f(x) = ?, g(x) = ?
  notes: |
    Exercise with two people. One person is f(x) = 2x + 1 another is g(x) = 2x + y where y 
    is the last result from f(x). The audience's job is to guess the implementations by poking at the
    functions with inputs. The functions each take turns answering. The audience shouts "2!" and then
    f replies "5". The audience says "3?" and g replies "11!" (2*3 + 5). The goal is to demonstrate that
    side effects are hard.

- style: mold
  heading: Referential Transparency
  notes: TODO Let's talk about the concept and then React...

- style: clay
  text: <q>Memoization is a simple optimization… Caching is like a deal with the devil.</q> <strong>Douglas Crockford</strong>
  code: memo.js

- style: purple
  heading: Mutable State is Hard
  notes: |
    TODO
    This is kind of mind blowing to someone used to iterating with i++
    jQuery soup
    React
    http://prog21.dadgum.com/25.html
    x = 5
    x = x + 1 (woah! wait! I thought x was 5?) ... oo encapsulation of state vs functional anti-state (react, etc might be good here)

- heading: Recursion
  code: count.erl

- style: slate
  code: [(Haskell), fib.hs, (JavaScript), fib.js]

- style: slate
  title: List Processing
  code: 
    - (In Racket...)
    - list-processing.rkt
  notes: Racket is a Lisp

- style: purple
  title: List Processing
  text: Here is some data
  code: robot1.js
  notes: Total height of Star Wars robots 

- style: purple
  title: List Processing
  text: Underscore.js / Lo-Dash
  code: robot2.js

- style: purple
  title: List Processing
  text: Functions are building blocks
  code: robot3.js
  notes: Total height of Star Wars robots 

- style: purple
  title: List Processing
  text: That's better
  code: robot4.js

- style: mold
  title: Add sum curry
  code: 
    - (In oOo...)
    - sum-curry1.js
    - (Underscore's argument order is silly...)
    - sum-curry2.js

- style: mold
  title: Add sum curry
  code:
    - (Haskell)
    - add.hs

- style: clay
  code: 
    - (Compose is the reusable chain)
    - robot5.js

- style: purple
  text: TODO composition example with react

- heading: Learn More!
  bullets:
    - Haskell
    - Clojure (Lisp)
    - Erlang/Elixir