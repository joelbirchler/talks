- style: clay
  title: Function Oriented JavaScript

- style: mold
  heading: Functional Concepts
  bullets:
    - Higher-order functions
    - Immutability
    - Referential transparency
    - List Processing
    - Recursion
    - Partial application
    - Composition

- style: purple
  heading: Functional Concepts <strong>in JS</strong>
  bullets:
    - Higher-order functions
    - <strike>Immutability</strike>
    - <strike>Referential transparency</strike>
    - List Processing
    - <strike>Tail</strike> Recursion
    - Partial application
    - Composition

- style: slate
  heading: Higher-order Functions
  code:
    - (Assign functions to variables)
    - higher-order1.js

- style: mold
  heading: Higher-order Functions
  code:
    - (Return functions from functions)
    - higher-order2.js

- style: slate
  heading: Higher-order Functions
  code:
    - (Pass functions to functions)
    - higher-order3.js

- style: mold
  heading: Functions in your Functions
  code:
    - (<strong>Don't</strong> do this...)
    - unnecessary1.js
    - (<strong>Do</strong> this...)
    - unnecessary2.js

- style: slate
  code: [(Haskell), fib.hs, (JavaScript), fib.js]

- style: clay
  text: <q>Memoization is a simple optimizationâ€¦ Caching is like a deal with the devil.</q> <strong>Douglas Crockford</strong>
  code: memo.js

- style: slate
  title: List Processing
  code: 
    - (In Racket...)
    - list-processing.rkt

- style: purple
  title: List Processing
  text: practical example of list processing with underscoreJS (grab some json, select a subset, and pluck out a value then reduce)

- style: clay
  text: simple function composition (no curry)

- text: currying, partial application with something like ajax get/post

- text: scoreunder for correct order. functions first! show bind example using both map and curry

- text: need some way of communicating functional thinking. so far we are just covering the tools.
